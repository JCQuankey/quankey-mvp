generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  displayName  String
  webauthnId   String?       @unique
  publicKey    String?
  counter      BigInt        @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastLogin    DateTime?
  credentials  Json?
  quantumSeed  String?
  passwords    Password[]    @relation("UserPasswords")
  recoveryKits RecoveryKit[]
  sessions     Session[]

  @@map("users")
}

model Password {
  id                String    @id @default(cuid())
  userId            String
  site              String
  username          String
  encryptedPassword String
  encryptedNotes    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastUsed          DateTime?
  isFavorite        Boolean   @default(false)
  category          String?   @default("General")
  strength          Int       @default(0)
  encryptedData     String
  iv                String
  salt              String
  authTag           String
  isQuantum         Boolean   @default(false)
  quantumSource     String?
  quantumEntropy    String?
  metadata          Json?
  encryptionVersion String    @default("1.0")
  algorithm         String    @default("AES-256-GCM")
  keyDerivation     String    @default("Argon2id")
  user              User      @relation("UserPasswords", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([site])
  @@index([category])
  @@index([isFavorite])
  @@map("passwords")
}

model Session {
  id           String   @id @default(cuid())
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String?
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model Team {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sharedVaults SharedVault[]
  members      TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model SharedVault {
  id        String   @id @default(cuid())
  teamId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("shared_vaults")
}

model RecoveryKit {
  id             String          @id @default(cuid())
  userId         String
  type           String
  sharesTotal    Int
  sharesRequired Int
  seedHash       String
  metadata       Json
  createdAt      DateTime        @default(now())
  expiresAt      DateTime
  isActive       Boolean         @default(true)
  usedAt         DateTime?
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares         RecoveryShare[]

  @@index([userId])
  @@index([isActive])
  @@map("recovery_kits")
}

model RecoveryShare {
  id            String              @id @default(cuid())
  recoveryKitId String
  shareIndex    Int
  shareId       String              @unique
  encryptedData String
  checksum      String
  status        String              @default("CREATED")
  recoveryKit   RecoveryKit         @relation(fields: [recoveryKitId], references: [id], onDelete: Cascade)
  distributions ShareDistribution[]

  @@index([recoveryKitId])
  @@index([shareId])
  @@map("recovery_shares")
}

model ShareDistribution {
  id               String        @id @default(cuid())
  shareId          String
  trusteeEmail     String
  trusteeName      String
  status           String        @default("PENDING")
  encryptedChannel Json?
  sentAt           DateTime?
  acceptedAt       DateTime?
  usedAt           DateTime?
  expiresAt        DateTime
  share            RecoveryShare @relation(fields: [shareId], references: [shareId], onDelete: Cascade)

  @@index([shareId])
  @@index([trusteeEmail])
  @@map("share_distributions")
}
