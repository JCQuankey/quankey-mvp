generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// REALISTIC PASSKEY + PQC ARCHITECTURE
model User {
  id             String              @id @default(cuid())
  username       String              @unique
  displayName    String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  lastLogin      DateTime?
  credentials    PasskeyCredential[]
  devices        UserDevice[]
  guardianShares GuardianShare[]
  vaultItems     VaultItem[]
  sessions       Session[]
  auditLogs      AuditLog[]

  @@map("users")
}

// Passkey credentials (WebAuthn standard)
model PasskeyCredential {
  id           String    @id @default(cuid())
  userId       String
  credentialId String    @unique // WebAuthn credential ID
  publicKey    Bytes // WebAuthn public key (NOT encrypted)
  signCount    Int       @default(0)
  createdAt    DateTime  @default(now())
  lastUsed     DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialId])
  @@map("passkey_credentials")
}

// Device PQC keys
model UserDevice {
  id               String    @id @default(cuid())
  userId           String
  deviceName       String
  pqcPublicKey     Bytes // ML-KEM-768 public key
  wrappedMasterKey Bytes? // Master Key wrapped for this device
  lastUsed         DateTime?
  createdAt        DateTime  @default(now())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_devices")
}

// Guardian shares for recovery 2-of-3
model GuardianShare {
  id             String   @id @default(cuid())
  userId         String
  guardianId     String // Guardian identifier
  encryptedShare Bytes // Share encrypted with guardian's PQC public key
  shareIndex     Int // Index of this share
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([guardianId])
  @@map("guardian_shares")
}

// Temporary registration challenges for passkeys
model TemporaryRegistration {
  id        String   @id @default(cuid())
  userId    String   @unique
  username  String   @unique
  challenge String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@map("temporary_registrations")
}

// Device pairing sessions for QR bridge
model PairingSession {
  id            String    @id @default(cuid())
  token         String    @unique
  hostUserId    String
  hostDeviceId  String
  newDeviceName String?
  status        String    @default("PENDING") // PENDING, CONNECTED, COMPLETED, EXPIRED
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  completedAt   DateTime?

  @@index([token])
  @@index([expiresAt])
  @@map("pairing_sessions")
}

// User sessions
model Session {
  id           String   @id @default(cuid())
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String?
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// Vault items encrypted with PQC
model VaultItem {
  id            String   @id @default(cuid())
  userId        String
  itemType      String // credential, note, card, etc.
  title         String
  encryptedData Bytes // Item data encrypted with DEK
  wrappedDEK    Bytes // DEK wrapped with Master Key
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemType])
  @@map("vault_items")
}
